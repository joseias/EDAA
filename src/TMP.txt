typedef struct Queue
{
	NodePtr front;
	NodePtr last;
	int size;
} Queue;

void testQueue();
bool isEmpty();
void enqueue(Queue* queue, int value);
int dequeue(Queue* queue);
Queue*  newQueue();

void testQueue(){
	Queue* q=newQueue();
	enqueue(q,1);
	enqueue(q,2);
	enqueue(q,3);

	while(!isEmpty(q)){
		printf("%d \n", dequeue(q));
	}
}

Queue* newQueue(){
	Queue* q=(Queue*) malloc(sizeof(Queue));
	q->size=0;
	return q;
}

void enqueue(Queue* queue,int value){
	NodePtr n =(NodePtr) malloc(sizeof(Node));
	n->value=value;
	n->next=NULL;

	if(queue->size==0){
		queue->front=n;
		queue->last=n;
	}
	else{
		queue->last->next=n;
		queue->last=n;
	}

	queue->size=queue->size+1;
}

int dequeue(Queue* queue){
	int value;
	NodePtr tmp;

	if(queue->size>0){
		value=(queue->front)->value;
		queue->size=queue->size-1;

		tmp=queue->front;
		queue->front=queue->front->next;
		free(tmp);

		return value;
	}
	else{
		printf("Queue is empty...");
		exit(0);
	}
}

bool isEmpty(Queue* queue){
	return queue->size == 0;
}
